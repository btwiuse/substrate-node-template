"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT"
])

# Generated Targets

rust_library(
    name = "mio",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "default",
        "with-deprecated",
    ],
    crate_root = "src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.6.22",
    # buildifier: leave-alone
    deps = [
        "//vendor/cfg-if-0.1.10:cfg_if",
        "//vendor/iovec-0.1.4:iovec",
        "//vendor/log-0.4.11:log",
        "//vendor/net2-0.2.34:net2",
        "//vendor/slab-0.4.2:slab",
    ] + selects.with_or({
        # cfg(unix)
        (
            "@io_bazel_rules_rust//rust/platform:x86_64-apple-darwin",
            "@io_bazel_rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "//vendor/libc-0.2.73:libc",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(windows)
        (
            "@io_bazel_rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "//vendor/kernel32-sys-0.2.2:kernel32_sys",
            "//vendor/miow-0.2.1:miow",
            "//vendor/winapi-0.2.8:winapi",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "test" with type "test" omitted
