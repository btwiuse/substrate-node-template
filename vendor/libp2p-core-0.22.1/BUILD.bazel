"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT"
])

# Generated Targets
# buildifier: disable=load-on-top
load(
    "@io_bazel_rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "libp2p_core_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "default",
        "libsecp256k1",
        "secp256k1",
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.22.1",
    visibility = ["//visibility:private"],
    deps = [
        "//vendor/prost-build-0.6.1:prost_build",
    ] + selects.with_or({
        # cfg(not(target_arch = "wasm32"))
        (
            "@io_bazel_rules_rust//rust/platform:x86_64-apple-darwin",
            "@io_bazel_rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@io_bazel_rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
        ],
        "//conditions:default": [],
    }),
)

rust_library(
    name = "libp2p_core",
    srcs = glob(["**/*.rs"]),
    aliases = {
        "//vendor/parity-multiaddr-0.9.2:parity_multiaddr": "multiaddr",
    },
    crate_features = [
        "default",
        "libsecp256k1",
        "secp256k1",
    ],
    crate_root = "src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.22.1",
    # buildifier: leave-alone
    deps = [
        ":libp2p_core_build_script",
        "//vendor/asn1_der-0.6.3:asn1_der",
        "//vendor/bs58-0.3.1:bs58",
        "//vendor/ed25519-dalek-1.0.0-pre.4:ed25519_dalek",
        "//vendor/either-1.6.1:either",
        "//vendor/fnv-1.0.7:fnv",
        "//vendor/futures-0.3.5:futures",
        "//vendor/futures-timer-3.0.2:futures_timer",
        "//vendor/lazy_static-1.4.0:lazy_static",
        "//vendor/libsecp256k1-0.3.5:libsecp256k1",
        "//vendor/log-0.4.11:log",
        "//vendor/multihash-0.11.2:multihash",
        "//vendor/multistream-select-0.8.2:multistream_select",
        "//vendor/parity-multiaddr-0.9.2:parity_multiaddr",
        "//vendor/parking_lot-0.10.2:parking_lot",
        "//vendor/pin-project-0.4.23:pin_project",
        "//vendor/prost-0.6.1:prost",
        "//vendor/rand-0.7.3:rand",
        "//vendor/rw-stream-sink-0.2.1:rw_stream_sink",
        "//vendor/sha2-0.8.2:sha2",
        "//vendor/smallvec-1.4.1:smallvec",
        "//vendor/thiserror-1.0.20:thiserror",
        "//vendor/unsigned-varint-0.4.0:unsigned_varint",
        "//vendor/void-1.0.2:void",
        "//vendor/zeroize-1.1.0:zeroize",
    ] + selects.with_or({
        # cfg(not(target_arch = "wasm32"))
        (
            "@io_bazel_rules_rust//rust/platform:x86_64-apple-darwin",
            "@io_bazel_rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@io_bazel_rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "//vendor/ring-0.16.15:ring",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "network_dial_error" with type "test" omitted

# Unsupported target "transport_upgrade" with type "test" omitted

# Unsupported target "util" with type "test" omitted
